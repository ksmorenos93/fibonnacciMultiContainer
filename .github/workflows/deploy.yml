name: Deploy MultiDocker  
on:
  push:
    branches:
      - main  # The branch where the project is located.

jobs:
  build:
    runs-on: ubuntu-latest  # The OS for the virtual machine
    steps:
      - uses: actions/checkout@v3

      # Login to Docker Hub using stored secrets (More secure method)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # here ksmorenos is my Docker Hub credential, and react-test is the name I
      # give to the image,  ./client/Dockerfile.dev (the place where the Dockerfile is located) ./client is the context folder
      - name: Build React test image
        run: docker build -t ksmorenos/react-test -f ./client/Dockerfile.dev ./client

      ## after the image is created then I run the image and the container, and run npm test to execute the test of our React app.
      - name: Run React tests
        run: docker run -e CI=true ksmorenos/react-test npm test

      # I build the client image
      - name: Build client image
        run: docker build -t ksmorenos/multi-client ./client

      # I build the Nginx image
      - name: Build Nginx image
        run: docker build -t ksmorenos/multi-nginx ./nginx

      # I build the server container (API)
      - name: Build server image
        run: docker build -t ksmorenos/multi-server ./api

      # I build the worker container
      - name: Build worker image
        run: docker build -t ksmorenos/multi-worker ./worker

      # These commands are pushing your built Docker images to Docker Hub, making them available for deployment or sharing.
      - name: Push client image
        run: docker push ksmorenos/multi-client

      - name: Push Nginx image
        run: docker push ksmorenos/multi-nginx

      - name: Push server image
        run: docker push ksmorenos/multi-server

      - name: Push worker image
        run: docker push ksmorenos/multi-worker


      # # Generate a deployment package of the application to be uploaded to AWS Elastic Beanstalk
      # - name: Generate deployment package
      #   run: zip -r deploy.zip . -x '*.git*'

      # # Deploy the  containers to AWS Elastic Beanstalk
      # - name: Deploy Frontend to EB
      #   uses: einaregilsson/beanstalk-deploy@v18
      #   with:
      #     aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     application_name: frontend
      #     environment_name: Frontend-env
      #     existing_bucket_name: elasticbeanstalk-us-east-1-992382504356
      #     region: us-east-1
      #     version_label: ${{ github.sha }}
      #     deployment_package: deploy.zip  ## the name of the deployment package created after running 